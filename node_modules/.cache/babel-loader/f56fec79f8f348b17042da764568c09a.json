{"remainingRequest":"/Users/drei/Developer/nft/node_modules/babel-loader/lib/index.js!/Users/drei/Developer/nft/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/drei/Developer/nft/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/drei/Developer/nft/src/components/NFTExplorer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/drei/Developer/nft/src/components/NFTExplorer.vue","mtime":1552285015682},{"path":"/Users/drei/Developer/nft/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drei/Developer/nft/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/drei/Developer/nft/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drei/Developer/nft/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Users/drei/Developer/nft/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport _parseInt from \"/Users/drei/Developer/nft/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NFTCard from './NFTCard.vue';\nexport default {\n  components: {\n    NFTCard: NFTCard\n  },\n  data: function data() {\n    return {\n      search_value: \"ef26427f9eaeed31c57884dbbc2bda5de7b5dab8\",\n      contract_hash: \"\",\n      address: \"\",\n      token_id: 0,\n      image_url: \"\",\n      //Known Contracts should probably be parsed out into a server side method\n      known_contracts: [\"ef26427f9eaeed31c57884dbbc2bda5de7b5dab8\"],\n      tokens: []\n    };\n  },\n  methods: {\n    buildURIRequest: function buildURIRequest(id, contract) {\n      var uriRequest = {\n        \"scriptHash\": contract,\n        \"operation\": \"uri\",\n        \"args\": [{\n          \"type\": 'Integer',\n          \"value\": _parseInt(id, 10)\n        }],\n        \"network\": \"TestNet\"\n      };\n      return uriRequest;\n    },\n    buildOwnerOfRequest: function buildOwnerOfRequest(id, contract) {\n      var ownerRequest = {\n        \"scriptHash\": contract,\n        \"operation\": \"ownerOf\",\n        \"args\": [{\n          \"type\": 'Integer',\n          \"value\": _parseInt(id, 10)\n        }],\n        \"network\": \"TestNet\"\n      };\n      return ownerRequest;\n    },\n    buildTotalSupplyRequest: function buildTotalSupplyRequest() {\n      var totalSupplyRequest = {\n        \"scriptHash\": this.contract_hash,\n        \"operation\": \"totalSupply\",\n        \"args\": [],\n        \"network\": \"TestNet\"\n      };\n      return totalSupplyRequest;\n    },\n    buildGetTokensOfOwnerRequest: function buildGetTokensOfOwnerRequest(scriptHash) {\n      var tokensOfOwnerRequest = {\n        \"scriptHash\": scriptHash,\n        \"operation\": \"tokensOfOwner\",\n        \"args\": [{\n          \"type\": 'ByteArray',\n          \"value\": Neon.u.reverseHex(Neon.wallet.getScriptHashFromAddress(this.address))\n        }, {\n          \"type\": \"Integer\",\n          \"value\": 1\n        }],\n        \"network\": \"TestNet\"\n      };\n      return tokensOfOwnerRequest;\n    },\n    convertHexToString: function convertHexToString(hex) {\n      var str = '';\n\n      for (var i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(_parseInt(hex.substr(i, 2), 16));\n      }\n\n      return str;\n    },\n    loadAllTokensForAddress: function loadAllTokensForAddress() {\n      var self = this;\n      var smartEcoRouter = new smartEco.SmartEcoRouter();\n      smartEcoRouter.start();\n      this.tokens = [];\n\n      for (var i = 0; i < this.known_contracts.length; i++) {\n        var req = self.buildGetTokensOfOwnerRequest(self.known_contracts[i]);\n\n        _Promise.all([smartEcoRouter.invokeRead(req), _Promise.resolve(self.known_contracts[i])]).then(function (values) {\n          var r = values[0];\n          var contract = values[1];\n          var deserialized = Neon.sc.StackItem.deserialize(r[\"stack\"][0][\"value\"]);\n\n          for (i = 0; i < deserialized[\"value\"].length; i++) {\n            var id = _parseInt(deserialized[\"value\"][i][\"value\"][\"value\"], 16);\n\n            var uriRequest = self.buildURIRequest(id, contract);\n            var ownerRequest = self.buildOwnerOfRequest(id, contract);\n\n            _Promise.all([smartEcoRouter.invokeRead(uriRequest), smartEcoRouter.invokeRead(ownerRequest), _Promise.resolve(id)]).then(function (values) {\n              var uri = self.convertHexToString(values[0][\"stack\"][0][\"value\"]);\n              var owner = self.convertHexToString(values[1][\"stack\"][0][\"value\"]);\n              self.tokens.push({\n                \"token_id\": values[2],\n                \"uri\": uri,\n                \"owner\": Neon.wallet.getAddressFromScriptHash(Neon.u.reverseHex(values[1][\"stack\"][0][\"value\"]))\n              });\n            }).catch(function () {//handle error\n            });\n          }\n        }).catch(function () {//handle error\n        });\n      }\n    },\n    loadAllTokensForContract: function loadAllTokensForContract() {\n      var self = this;\n      var smartEcoRouter = new smartEco.SmartEcoRouter();\n      smartEcoRouter.start();\n      this.tokens = [];\n      smartEcoRouter.invokeRead(self.buildTotalSupplyRequest()).then(function (r) {\n        var totalSupply = _parseInt(r[\"stack\"][0][\"value\"], 16);\n\n        for (var i = 1; i < totalSupply + 1; i++) {\n          var uriRequest = self.buildURIRequest(i, self.contract_hash);\n          var ownerRequest = self.buildOwnerOfRequest(i, self.contract_hash);\n\n          _Promise.all([smartEcoRouter.invokeRead(uriRequest), smartEcoRouter.invokeRead(ownerRequest), _Promise.resolve(i)]).then(function (values) {\n            var uri = self.convertHexToString(values[0][\"stack\"][0][\"value\"]);\n            var owner = self.convertHexToString(values[1][\"stack\"][0][\"value\"]);\n            self.tokens.push({\n              \"token_id\": values[2],\n              \"uri\": uri,\n              \"owner\": Neon.wallet.getAddressFromScriptHash(Neon.u.reverseHex(values[1][\"stack\"][0][\"value\"]))\n            });\n            console.log(self.tokens);\n          }).catch(function () {//handle error\n          });\n        }\n      }).catch(function () {//handle error\n      });\n    },\n    searchForValue: function searchForValue() {\n      if (Neon.wallet.isAddress(this.search_value)) {\n        this.address = this.search_value;\n        this.loadAllTokensForAddress();\n      } else {\n        this.contract_hash = this.search_value;\n        this.loadAllTokensForContract();\n      }\n    }\n  }\n};",{"version":3,"sources":["NFTExplorer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div id=\"explorer\">\n    <div class=\"row mt-5\">\n\t\t<div class=\"col col-md-6 mx-auto\">\n\t\t\t<h6>Find NFT Tokens</h6>\n\t\t\t<div class=\"input-group mb-3\">\n\t\t\t\t<input v-model=\"search_value\" placeholder=\"Contract or User Address\" aria-label=\"NEO address\" aria-describedby=\"basic-addon2\" class=\"form-control\">\n\t\t\t\t<div class=\"input-group-append\">\n\t\t\t\t\t<button type=\"button\" v-on:click=\"searchForValue\" class=\"btn btn-primary btn-o3-primary\">\n\t\t\t\t\t\tSearch\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<section class=\"container\">\n\t\t<div class=\"row row-grid mt-lg d-lg-flex\">\n\t\t\t<div class=\"col-sm-6 col-lg-4 mb-lg-4\" v-for=\"nft in tokens\" :key=\"nft.token_id\">\n\t\t\t\t<NFTCard v-bind:token_id=\"nft.token_id\" v-bind:owner=\"owner\" v-bind:uri=\"nft.uri\"></NFTCard>\n\t\t\t</div>\n\t\t</div>\n    </section>\n</div>\n</template>\n\n<script type=\"text/javascript\">\n\timport NFTCard from './NFTCard.vue'\n\t\n\texport default {\n\t\tcomponents: {\n\t\t\tNFTCard\n\t\t},\n\t\tdata: function () {\n\t\t\treturn {\n\t\t\t\tsearch_value:\"ef26427f9eaeed31c57884dbbc2bda5de7b5dab8\",\n\t\t\t\tcontract_hash: \"\",\n\t\t\t\taddress: \"\",\n\t\t\t\ttoken_id: 0,\n\t\t\t\timage_url:\"\",\n\t\t\t\t//Known Contracts should probably be parsed out into a server side method\n\t\t\t\tknown_contracts: [\"ef26427f9eaeed31c57884dbbc2bda5de7b5dab8\"],\n\t\t\t\ttokens:[]\n\t\t\t}\n\t\t}, \n\t\tmethods:{\n\t\t\tbuildURIRequest(id, contract) {\n\t\t\t\tvar uriRequest = {\n\t\t\t\t\t\t\"scriptHash\": contract,\n  \t\t\t\t\t\t\"operation\": \"uri\",\n  \t\t\t\t\t\t\"args\": [\n    \t\t\t\t\t\t{\n      \t\t\t\t\t\t\t\"type\": 'Integer',\n      \t\t\t\t\t\t\t\"value\": parseInt(id, 10)\n      \t\t\t\t\t\t}\n  \t\t\t\t\t\t],\n  \t\t\t\t\t\t\"network\": \"TestNet\"\n\t\t\t\t\t}\n\t\t\t\treturn uriRequest\n\t\t\t},\n\n\t\t\tbuildOwnerOfRequest(id, contract) {\n\t\t\t\tvar ownerRequest = {\n\t\t\t\t\t\t\"scriptHash\": contract,\n\t\t\t\t\t\t\"operation\": \"ownerOf\",\n\t\t\t\t\t\t\"args\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": 'Integer',\n\t\t\t\t\t\t\t\t\"value\": parseInt(id, 10)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"network\": \"TestNet\"\n\t\t\t\t\t}\n\t\t\t\treturn ownerRequest\n\t\t\t},\n\n\t\t\tbuildTotalSupplyRequest() {\n\t\t\t\tvar totalSupplyRequest = {\n\t\t\t\t\t\t\"scriptHash\": this.contract_hash,\n\t\t\t\t\t\t\"operation\": \"totalSupply\",\n\t\t\t\t\t\t\"args\": [],\n\t\t\t\t\t\t\"network\": \"TestNet\"\n\t\t\t\t\t}\n\t\t\t\treturn totalSupplyRequest\n\t\t\t},\n\t\t\t\n\t\t\tbuildGetTokensOfOwnerRequest(scriptHash) {\n\t\t\t\tvar tokensOfOwnerRequest = {\n\t\t\t\t\t\"scriptHash\": scriptHash,\n\t\t\t\t\t\t\"operation\": \"tokensOfOwner\",\n\t\t\t\t\t\t\"args\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": 'ByteArray',\n\t\t\t\t\t\t\t\t\"value\": Neon.u.reverseHex(Neon.wallet.getScriptHashFromAddress(this.address))\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t\"type\": \"Integer\",\n\t\t\t\t\t\t\t\t\"value\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\"network\": \"TestNet\"\n\t\t\t\t}\n\t\t\t\treturn tokensOfOwnerRequest\n\t\t\t},\n\n\t\t\tconvertHexToString(hex) {\n    \t\t\tvar str = '';\n    \t\t\tfor (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)\n        \t\t\tstr += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    \t\t\treturn str;\n\t\t\t},\n\t\t\t\n\t\t\tloadAllTokensForAddress() {\n\t\t\t\tvar self = this\n\t\t\t\tvar smartEcoRouter = new smartEco.SmartEcoRouter()\n\t\t\t\tsmartEcoRouter.start()\n\n\t\t\t\tthis.tokens = []\n\t\t\t\tfor (var i = 0; i < this.known_contracts.length; i++) {\n\t\t\t\t\tvar req = self.buildGetTokensOfOwnerRequest(self.known_contracts[i])\n\t\t\t\t\tPromise.all([smartEcoRouter.invokeRead(req), Promise.resolve(self.known_contracts[i])])\n\t\t\t\t\t\t.then(function(values) {\n\t\t\t\t\t\t\tvar r = values[0]\n\t\t\t\t\t\t\tvar contract = values[1]\n\t\t\t\t\t\t\tvar deserialized = Neon.sc.StackItem.deserialize(r[\"stack\"][0][\"value\"])\n\t\t\t\t\t\t\tfor (i=0; i< deserialized[\"value\"].length; i++) {\n\t\t\t\t\t\t\t\tvar id = parseInt(deserialized[\"value\"][i][\"value\"][\"value\"], 16)\n\t\t\t\t\t\t\t\tvar uriRequest = self.buildURIRequest(id, contract)\n\t\t\t\t\t\t\t\tvar ownerRequest = self.buildOwnerOfRequest(id, contract)\t\n\t\t\t\t\t\t\t\tPromise.all([smartEcoRouter.invokeRead(uriRequest), smartEcoRouter.invokeRead(ownerRequest), Promise.resolve(id)])\n\t\t\t\t\t\t\t\t\t.then(function(values) {\n\t\t\t\t\t\t\t\t\t\tvar uri = self.convertHexToString(values[0][\"stack\"][0][\"value\"])\n\t\t\t\t\t\t\t\t\t\tvar owner = self.convertHexToString(values[1][\"stack\"][0][\"value\"])\n\t\t\t\t\t\t\t\t\t\tself.tokens.push ({\n\t\t\t\t\t\t\t\t\t\t\t\"token_id\": values[2],\n\t\t\t\t\t\t\t\t\t\t\t\"uri\": uri,\n\t\t\t\t\t\t\t\t\t\t\t\"owner\": Neon.wallet.getAddressFromScriptHash(Neon.u.reverseHex(values[1][\"stack\"][0][\"value\"]))\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch(function() {\n\t\t\t\t\t\t\t\t\t\t//handle error\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(function() {\n\t\t\t\t\t\t\t//handle error\n\t\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tloadAllTokensForContract() {\n\t\t\t\tvar self = this\n\t\t\t\tvar smartEcoRouter = new smartEco.SmartEcoRouter()\n\t\t\t\tsmartEcoRouter.start()\n\t\t\t\tthis.tokens = []\n\t\t\t\tsmartEcoRouter.invokeRead(self.buildTotalSupplyRequest())\n\t\t\t\t\t.then(function(r) {\n\t\t\t\t\t\tvar totalSupply = parseInt(r[\"stack\"][0][\"value\"], 16)\n\t\t\t\t\t\tfor (var i=1; i< totalSupply + 1; i++) {\n\t\t\t\t\t\t\tvar uriRequest = self.buildURIRequest(i, self.contract_hash)\n\t\t\t\t\t\t\tvar ownerRequest = self.buildOwnerOfRequest(i, self.contract_hash)\t\n\n\t\t\t\t\t\t\tPromise.all([smartEcoRouter.invokeRead(uriRequest), smartEcoRouter.invokeRead(ownerRequest), Promise.resolve(i)])\n\t\t\t\t\t\t\t\t.then(function(values) {\n\t\t\t\t\t\t\t\t\tvar uri = self.convertHexToString(values[0][\"stack\"][0][\"value\"])\n\t\t\t\t\t\t\t\t\tvar owner = self.convertHexToString(values[1][\"stack\"][0][\"value\"])\n\t\t\t\t\t\t\t\t\tself.tokens.push ({\n\t\t\t\t\t\t\t\t\t\t\"token_id\": values[2],\n\t\t\t\t\t\t\t\t\t\t\"uri\": uri,\n\t\t\t\t\t\t\t\t\t\t\"owner\": Neon.wallet.getAddressFromScriptHash(Neon.u.reverseHex(values[1][\"stack\"][0][\"value\"]))\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tconsole.log(self.tokens)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(function() {\n\t\t\t\t\t\t\t\t\t//handle error\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function() {\n\t\t\t\t\t\t//handle error\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\tsearchForValue() {\n\t\t\t\tif (Neon.wallet.isAddress(this.search_value)) {\n\t\t\t\t\tthis.address = this.search_value\n\t\t\t\t\tthis.loadAllTokensForAddress()\n\t\t\t\t} else {\n\t\t\t\t\tthis.contract_hash = this.search_value\n\t\t\t\t\tthis.loadAllTokensForContract()\n\t\t\t\t}\n\t\t\t},\n\t\t}, \n\t};\n</script>\n"],"sourceRoot":"src/components"}]}